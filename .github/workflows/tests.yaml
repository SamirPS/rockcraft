name: Tests

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  linters:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install packages
        run: |
          sudo apt update
          sudo apt install -y libapt-pkg-dev
      - name: Install python packages and dependencies
        run: |
          pip install -U -r requirements-focal.txt -r requirements.txt -r requirements-dev.txt
      - name: Run black
        run: |
          make test-black
      - name: Run codespell
        run: |
          make test-codespell
      - name: Run flake8
        run: |
          make test-flake8
      - name: Run isort
        run: |
          make test-isort
      - name: Run mypy
        run: |
          make test-mypy
      - name: Run pydocstyle
        run: |
          make test-pydocstyle
      - name: Run pyright
        run: |
          sudo snap install --classic node
          sudo snap install --classic pyright
          make test-pyright

  tests:
    strategy:
      matrix:
        os: [macos-10.15, ubuntu-18.04, ubuntu-20.04, windows-2019]
        python-version: [3.8, 3.9]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install python packages and dependencies
        run: |
          pip install -U wheel
      - name: Install Ubuntu-specific dependencies
        if: ${{ matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04' }}
        run: |
          sudo apt update
          sudo apt install -y python3-pip python3-setuptools python3-wheel python3-venv libapt-pkg-dev
      - name: Install Ubuntu 18.04-specific dependencies
        if: ${{ matrix.os == 'ubuntu-18.04' }}
        run: |
          # pip 20.2 breaks python3-apt, so pin the version before building
          pip install -U pip==20.1
          pip install -U -r requirements-bionic.txt
      - name: Install Ubuntu 20.04-specific dependencies
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: |
          pip install -U -r requirements-focal.txt
      - name: Install dependencies
        run: |
          pip install -U -r requirements.txt -r requirements-dev.txt
          pip install -e .
      - name: Run unit tests
        run: |
          make test-units
      - name: Run integration tests
        run: |
          make test-integrations

  snap-build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build snap
        uses: snapcore/action-build@v1
        id: snapcraft
      - name: Upload snap artifact
        uses: actions/upload-artifact@v2
        with:
          name: snap
          path: ${{ steps.snapcraft.outputs.snap }}

  snap-tests:
    needs: [snap-build]
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Download snap artifact
        uses: actions/download-artifact@v2
        with:
          name: snap
          path: snap-artifacts
      - name: Install snap
        run: |
          sudo snap install --classic --dangerous snap-artifacts/*.snap
          rm -rf snap-artifacts
      - name: Install LXD dependency on 18.04
        if: ${{ matrix.os == 'ubuntu-18.04' }}
        run: |
          sudo apt remove -y lxd
          sudo snap install lxd
      - name: Refresh LXD dependency on 20.04
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: |
          sudo snap refresh lxd || echo "Cannot refresh LXD dependency, using $(lxd --version)"
      - name: Configured LXD
        run: |
          sudo groupadd --force --system lxd
          sudo usermod --append --groups lxd $USER
          sudo snap start lxd
          sudo lxd waitready --timeout=30
          sudo lxd init --auto
      - name: Run smoke tests
        run: |
          mkdir -p rock-smoke-test
          pushd rock-smoke-test
          cat <<- EOF > rockcraft.yaml
          name: smoke-test
          version: latest
          base: ubuntu:20.04
          build-base: ubuntu:20.04
          parts:
            foo:
              plugin: nil
              overlay-packages: [figlet]
              overlay-script: |
                 chroot "\$ROCKCRAFT_OVERLAY" /bin/bash -c "rm /etc/issue"
                 chroot "\$ROCKCRAFT_OVERLAY" /bin/bash -c "echo -e '#!/bin/bash\\ntest ! -f /etc/issue;echo \"Ship it!\"|figlet'>/run.sh;chmod +x /run.sh"
          EOF
          sg lxd -c "rockcraft pack"
          test -f smoke-test_latest.rock
          test ! -d work
          tar tf smoke-test_latest.rock | grep oci-layout
          # test container execution
          sudo docker images
          sudo /snap/rockcraft/current/bin/skopeo --insecure-policy copy oci-archive:smoke-test_latest.rock docker-daemon:smoke-test:latest
          sudo docker images
          sudo docker run --entrypoint /run.sh smoke-test:latest
          popd
